base: &base
  env_vars :
    NVSHMEM_DISABLE_CUDA_VMM: 1
    NVSHMEM_DISABLE_NCCL: 1

  dtypes: ['R32', 'R64', 'C32', 'C64']
  apply_skips: None
  use_single_pdim: False
  is_halo_test: False
  test_mem_order: False
  test_mem_order_override: False

transpose_test_base: &transpose_test_base
  <<: *base

  # Creating list of args to control order and enable easier overriding of values
  args : ['backend',
          'gx', 'gy', 'gz',
          'gd',
          'hex' ,'hey', 'hez',
          'pdx', 'pdy', 'pdz']

  backend: [1, 2, 3, 4, 5, 6, 7]

  gx: [128]
  gy: [124]
  gz: [132]

  gd: ["0 0 0"]

  hex: ["0 0 0"]
  hey: ["0 0 0"]
  hez: ["0 0 0"]

  pdx: ["0 0 0"]
  pdy: ["0 0 0"]
  pdz: ["0 0 0"]

  out_of_place: [True, False]
  managed_memory : [True, False]
  run_autotuning : False
  test_mem_order: True
  fortran_indexing: False

transpose_test: &transpose_test
  <<: *transpose_test_base

transpose_test_halo: &transpose_test_halo
  <<: *transpose_test_base

  backend: [1, 2] # Limit testing to one non-pipelined and one pipelined backend
  dtypes: ['R32'] # Limit testing to one dtype

  hex: ["0 0 0", "1 1 1"]
  hey: ["0 0 0", "1 1 1"]
  hez: ["0 0 0", "1 1 1"]
  apply_skips: 'transpose'

transpose_test_padding: &transpose_test_padding
  <<: *transpose_test_base

  backend: [1, 2] # Limit testing to one non-pipelined and one pipelined backend
  dtypes: ['R32'] # Limit testing to one dtype

  pdx: ["0 0 0", "1 1 1"]
  pdy: ["0 0 0", "1 1 1"]
  pdz: ["0 0 0", "1 1 1"]
  apply_skips: 'transpose'

transpose_test_gdimdist: &transpose_test_gdimdist
  <<: *transpose_test_base
  backend: [1] # Limit testing to one backend
  dtypes: ['R32'] # Limit testing to one dtype

  gd: ["16 16 16"]
  apply_skips: 'transpose'

transpose_test_mix: &transpose_test_mix
  <<: *transpose_test_base

  backend: [1, 2] # Limit testing to one non-pipelined and one pipelined backend
  dtypes: ['R32'] # Limit testing to one dtype

  hex: ["0 0 0", "1 1 1"]
  hey: ["0 0 0", "1 1 1"]
  hez: ["0 0 0", "1 1 1"]

  pdx: ["0 0 0", "1 1 1"]
  pdy: ["0 0 0", "1 1 1"]
  pdz: ["0 0 0", "1 1 1"]

  apply_skips: 'transpose_mix'

transpose_test_ac: &transpose_test_ac
  <<: *transpose_test_base
  args : ['backend',
          'acx', 'acy', 'acz',
          'gx', 'gy', 'gz',
          'gd',
          'hex' ,'hey', 'hez',
          'pdx', 'pdy', 'pdz']

  backend: [1] # Limit this testing to one backend
  dtypes: ['R32'] # Limit to one data type

  acx: [0, 1]
  acy: [0, 1]
  acz: [0, 1]

  test_mem_order: False

transpose_test_mem_order_override: &transpose_test_mem_order_override
  <<: *transpose_test_base
  args : ['backend',
          'acx', 'acy', 'acz',
          'gx', 'gy', 'gz',
          'gd',
          'hex' ,'hey', 'hez',
          'pdx', 'pdy', 'pdz']

  backend: [1] # Limit this testing to one backend
  dtypes: ['R32'] # Limit to one data type

  acx: [0]
  acy: [0]
  acz: [0]

  test_mem_order: False
  test_mem_order_override: True
  out_of_place: [False]
  managed_memory : [False]

transpose_test_cc:
  <<: *transpose_test
  executable_prefix: 'cc/transpose_test'

transpose_test_halo_cc:
  <<: *transpose_test_halo
  executable_prefix: 'cc/transpose_test'

transpose_test_padding_cc:
  <<: *transpose_test_padding
  executable_prefix: 'cc/transpose_test'

transpose_test_gdimdist_cc:
  <<: *transpose_test_gdimdist
  executable_prefix: 'cc/transpose_test'

transpose_test_mix_cc:
  <<: *transpose_test_mix
  executable_prefix: 'cc/transpose_test'

transpose_test_ac_cc:
  <<: *transpose_test_ac
  executable_prefix: 'cc/transpose_test'

transpose_test_mem_order_override_cc:
  <<: *transpose_test_mem_order_override
  executable_prefix: 'cc/transpose_test'

transpose_test_fortran:
  <<: *transpose_test
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

transpose_test_halo_fortran:
  <<: *transpose_test_halo
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

transpose_test_padding_fortran:
  <<: *transpose_test_padding
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

transpose_test_gdimdist_fortran:
  <<: *transpose_test_gdimdist
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

transpose_test_mix_fortran:
  <<: *transpose_test_mix
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

transpose_test_ac_fortran:
  <<: *transpose_test_ac
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

transpose_test_mem_order_override_fortran:
  <<: *transpose_test_mem_order_override
  executable_prefix: 'fortran/transpose_test'
  fortran_indexing: true

halo_test_base: &halo_test_base
  <<: *base

  args : ['backend',
          'gx', 'gy', 'gz',
          'gd',
          'hex' ,'hey', 'hez',
          'hpx', 'hpy', 'hpz',
          'pdx', 'pdy', 'pdz',
          'ax']

  backend: [1, 2, 3, 4, 5]

  gx: [128]
  gy: [132]
  gz: [124]

  gd: ["0 0 0"]

  hex: [1]
  hey: [1]
  hez: [1]

  hpx: [1]
  hpy: [1]
  hpz: [1]

  pdx: [0]
  pdy: [0]
  pdz: [0]

  ax: [0, 1, 2]

  managed_memory : [True, False]
  out_of_place : [False]
  run_autotuning : False
  test_mem_order: True
  fortran_indexing: False
  is_halo_test: True

halo_test: &halo_test
  <<: *halo_test_base

halo_test_halomix: &halo_test_halomix
  <<: *halo_test_base

  backend: [1] # Limit testing to one backend
  dtypes: ['R32'] # Limit testing to one dtype

  hex: [0, 1]
  hey: [0, 1]
  hez: [0, 1]

  hpx: [0, 1]
  hpy: [0, 1]
  hpz: [0, 1]
  apply_skips: 'halo'

halo_test_padding: &halo_test_padding
  <<: *halo_test_base

  backend: [1] # Limit testing to one backend
  dtypes: ['R32'] # Limit testing to one dtype

  pdx: [0, 1]
  pdy: [0, 1]
  pdz: [0, 1]

  apply_skips: 'halo_padding'

halo_test_gdimdist: &halo_test_gdimdist
  <<: *halo_test_base

  backend: [1] # Limit testing to one backend
  dtypes: ['R32'] # Limit testing to one dtype

  gd: ["16 16 16"]

  apply_skips: 'halo'

halo_test_mix: &halo_test_mix
  <<: *halo_test_base

  backend: [1] # Limit testing to one backend
  dtypes: ['R32'] # Limit testing to one dtype

  pdx: [0, 1]
  pdy: [0, 1]
  pdz: [0, 1]

  hex: [0, 1]
  hey: [0, 1]
  hez: [0, 1]

  hpx: [0, 1]
  hpy: [0, 1]
  hpz: [0, 1]

  apply_skips: 'halo_padding'

halo_test_ac: &halo_test_ac
  <<: *halo_test_base
  args : ['backend',
          'gx', 'gy', 'gz',
          'ac', 'gd',
          'hex' ,'hey', 'hez',
          'hpx', 'hpy', 'hpz',
          'pdx', 'pdy', 'pdz',
          'ax']

  backend: [1] # Limit this testing to one backend
  dtypes: ['R32'] # Limit to one data type

  ac: [0, 1]

  test_mem_order: False

halo_test_mem_order_override: &halo_test_mem_order_override
  <<: *halo_test_base
  args : ['backend',
          'gx', 'gy', 'gz',
          'ac', 'gd',
          'hex' ,'hey', 'hez',
          'hpx', 'hpy', 'hpz',
          'pdx', 'pdy', 'pdz',
          'ax']

  backend: [1] # Limit this testing to one backend
  dtypes: ['R32'] # Limit to one data type

  ac: [0]

  test_mem_order: False
  test_mem_order_override: True
  managed_memory : [False]

halo_test_cc:
  <<: *halo_test
  executable_prefix: 'cc/halo_test'

halo_test_halomix_cc:
  <<: *halo_test_halomix
  executable_prefix: 'cc/halo_test'

halo_test_padding_cc:
  <<: *halo_test_padding
  executable_prefix: 'cc/halo_test'

halo_test_gdimdist_cc:
  <<: *halo_test_gdimdist
  executable_prefix: 'cc/halo_test'

halo_test_mix_cc:
  <<: *halo_test_mix
  executable_prefix: 'cc/halo_test'

halo_test_ac_cc:
  <<: *halo_test_ac
  executable_prefix: 'cc/halo_test'

halo_test_mem_order_override_cc:
  <<: *halo_test_mem_order_override
  executable_prefix: 'cc/halo_test'

halo_test_fortran:
  <<: *halo_test
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true

halo_test_halomix_fortran:
  <<: *halo_test_halomix
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true

halo_test_padding_fortran:
  <<: *halo_test_padding
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true

halo_test_gdimdist_fortran:
  <<: *halo_test_gdimdist
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true

halo_test_mix_fortran:
  <<: *halo_test_mix
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true

halo_test_ac_fortran:
  <<: *halo_test_ac
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true

halo_test_mem_order_override_fortran:
  <<: *halo_test_mem_order_override
  ax: [1, 2, 3]
  executable_prefix: 'fortran/halo_test'
  fortran_indexing: true
